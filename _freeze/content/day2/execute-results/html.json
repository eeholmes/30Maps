{
  "hash": "a56951eb343d69a12e56e15356d1c93a",
  "result": {
    "markdown": "---\ntitle: \"Day 2 Lines\"\n---\n\n\n## Re-create this image\n\n[https://milospopovic.net/mapping-wind-data-in-r/](https://milospopovic.net/mapping-wind-data-in-r/) using his code. I made some changes to the code but it is largely adapted and copied from Milos Popovic 2022/08/28.\n\nThis uses the {[metR](https://cran.r-project.org/package=metR)} package function `geom_streamline()` to plot the lines. Nice blog on using this for wind and current plot here: [Plotting streamlines](https://semba-blog.netlify.app/03/20/2019/plotting-streamlines-of-surface-current-with-ggplot2-and-metr-package/) by [Masumbuko Semba](https://semba-blog.netlify.app/about/).\n\n## Set up\n\nInstall packages.\n\n::: {.cell}\n\n```{.r .cell-code}\n# libraries we need\nlibs <- c(\n  \"tidyverse\", \"sf\", \"giscoR\",\n  \"lubridate\", \"classInt\",\n  \"rWind\", \"metR\", \"oce\", \"tidyterra\"\n)\n\n# install missing libraries\ninstalled_libs <- libs %in% rownames(installed.packages())\nif (any(installed_libs == F)) {\n  install.packages(libs[!installed_libs])\n}\n\n# load libraries\ninvisible(lapply(libs, library, character.only = T))\n```\n:::\n\n\nSpecifications for date and location.\n\n::: {.cell}\n\n```{.r .cell-code}\nyear <- 2022\nmonth <- c(start = 8, end = 8)\nday <- c(start = 27, end = 28)\nby <- \"1 hours\"\nlatlon <- c(xmin = -28.5, xmax = 58.5, ymin = 34.0, ymax = 73.5)\n```\n:::\n\n\nGet wind function\n\n::: {.cell}\n\n```{.r .cell-code}\nget_wind_data <- function(time_range, mean_wind_data, eur_wind_df) {\n  time_range <- seq(lubridate::ymd_hms(paste(year, month[1], day[1], 00, 00, 00, sep = \"-\")),\n    lubridate::ymd_hms(paste(year, month[2], day[2], 00, 00, 00, sep = \"-\")),\n    by = by\n  )\n\n  mean_wind_data <- rWind::wind.dl_2(time_range, latlon[1], latlon[2], latlon[3], latlon[4]) %>%\n    rWind::wind.mean()\n\n  df <- as.data.frame(mean_wind_data)\n  return(df)\n}\n```\n:::\n\n\nGet wind data and make into a raster for plotting later.\n\n::: {.cell}\n\n```{.r .cell-code}\ncrs_string <- \"+proj=longlat +datum=WGS84 +no_defs\"\nfilePath <- here::here(\"content\", \"data\", paste0(\"wind-\", year, \"-\", month[1], \"-\", day[1], \".RData\"))\nif (!file.exists(filePath)) {\n  df <- get_wind_data()\n  save(df, file = filePath)\n} else {\n  load(filePath)\n}\ncolnames(df) <- c(\"time\", \"lat\", \"lon\", \"u\", \"v\", \"dir\", \"vel\")\ndf2 <- data.frame(x = df$lon, y = df$lat, z = df$vel)\nras <- raster::rasterFromXYZ(df2, crs = crs_string)\nbb <- st_bbox(ras)\nlibrary(terra)\nr <- terra::rast(ras)\nnames(r) <- \"vel\"\nsetMinMax(r)\n```\n:::\n\n\nGet the land polygons.\n\n::: {.cell}\n\n```{.r .cell-code}\nregion <- c(\"Europe\", \"Asia\")\nland_sf <- giscoR::gisco_get_countries(\n  year = \"2016\", epsg = \"4326\",\n  resolution = \"10\", region = region\n)\n```\n:::\n\n\nTest plot of the raster of wind speed.\n\n::: {.cell}\n\n```{.r .cell-code}\nautoplot(r) +\n  geom_sf(\n    data = land_sf,\n    fill = NA,\n    color = \"#07CFF7\",\n    linewidth = 1,\n    alpha = .99\n  ) +\n  coord_sf(\n    crs = crs_string,\n    xlim = c(bb[\"xmin\"], bb[\"xmax\"]),\n    ylim = c(bb[\"ymin\"], bb[\"ymax\"]),\n    expand = FALSE\n  )\n```\n\n::: {.cell-output-display}\n![](day2_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nSet up colors for lines and the legend.\n\n::: {.cell}\n\n```{.r .cell-code}\n# colors\ncols <- c(\n  \"#feebe2\", \"#d84594\", \"#bc2b8a\", \"#7a0177\"\n)\n\nnewcol <- colorRampPalette(cols)\nncols <- 6\ncols2 <- newcol(ncols)\n\n# breaks\nvmin <- min(df$vel, na.rm = T)\nvmax <- max(df$vel, na.rm = T)\n\nbrk <- classInt::classIntervals(df$vel,\n  n = 6,\n  style = \"fisher\"\n)$brks %>%\n  head(-1) %>%\n  tail(-1) %>%\n  append(vmax)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in classInt::classIntervals(df$vel, n = 6, style = \"fisher\"): N is\nlarge, and some styles will run very slowly; sampling imposed\n```\n:::\n\n```{.r .cell-code}\nbreaks <- c(vmin, brk)\n```\n:::\n\n\nMake the plot. the `after_stat()` bit is to delay the calculation of the color until after `geom_streamline()` does some grouping, I think. Anyhow just using `color = sqrt(vel)` doesn't work.\n\n::: {.cell}\n\n```{.r .cell-code}\np <- df %>%\n  ggplot() +\n  geom_sf(\n    data = land_sf,\n    fill = \"grey90\",\n    color = \"#07CFF7\",\n    linewidth = .5,\n    alpha = .99\n  ) +\n  metR::geom_streamline(\n    data = df,\n    aes(\n      x = lon, y = lat, dx = u, dy = v,\n      color = sqrt(after_stat(dx)^2 + after_stat(dy)^2)\n    ),\n    L = 2, res = 2, n = 60,\n    arrow = NULL, lineend = \"round\",\n    alpha = .85\n  ) +\n  geom_sf(\n    data = land_sf,\n    fill = NA,\n    color = \"#07CFF7\",\n    linewidth = .5,\n    alpha = .5\n  ) +\n  coord_sf(\n    crs = crs_string,\n    xlim = c(bb[\"xmin\"], bb[\"xmax\"]),\n    ylim = c(bb[\"ymin\"], bb[\"ymax\"]),\n    expand = FALSE\n  ) +\n  scale_color_gradientn(\n    name = \"Average speed (m/s)\",\n    colours = cols2,\n    breaks = breaks,\n    labels = round(breaks, 1),\n    limits = c(vmin, vmax)\n  ) +\n  guides(\n    fill = \"none\",\n    color = guide_legend(\n      direction = \"horizontal\",\n      keyheight = unit(2.5, units = \"mm\"),\n      keywidth = unit(15, units = \"mm\"),\n      title.position = \"top\",\n      title.hjust = .5,\n      label.hjust = .5,\n      nrow = 1,\n      byrow = T,\n      reverse = F,\n      label.position = \"bottom\"\n    )\n  ) +\n  theme_bw() +\n  theme(legend.position = c(.5, .1))\np\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Using the `size` aesthetic in this geom was deprecated in ggplot2 3.4.0.\nâ„¹ Please use `linewidth` in the `default_aes` field and elsewhere instead.\n```\n:::\n\n::: {.cell-output-display}\n![](day2_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\naxissize <- 30\np2 <- p +\n  theme(\n    axis.text.x = element_text(size = axissize),\n    axis.text.y = element_text(size = axissize),\n    axis.title.x = element_text(size = axissize),\n    axis.title.y = element_text(size = axissize),\n    legend.text = element_text(size = 60, color = \"black\"),\n    legend.title = element_text(size = 80, color = \"black\"),\n    legend.key = element_blank(),\n    legend.spacing.y = unit(.5, \"pt\"),\n  )\nggsave(\n  filename = \"eur_wind.png\",\n  width = 8.5, height = 7, dpi = 300, p2\n)\n```\n:::\n",
    "supporting": [
      "day2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}