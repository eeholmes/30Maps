{
  "hash": "a6dcdbf813018a19a626bff7e631defd",
  "result": {
    "markdown": "---\ntitle: \"Day 22 Movement\"\n---\n\n\n## Re-create this image\n\nToday's goal is to recreate the ARGO float animated image from this blog post: [annimate oceanographic data](https://semba-blog.netlify.app/10/29/2018/animating-oceanographic-data-in-r-with-ggplot2-and-gganimate/) by [Masumbuko Semba](https://semba-blog.netlify.app/about/) [GitHub](https://github.com/lugoga)\n\nI ended up using more of this code: @HansenDJohnson\nhttps://hansenjohnson.org/post/bathymetric-maps-in-r/\nand @geokaramanis\nhttps://github.com/gkaramanis/30DayMapChallenge/tree/main/2022/07-raster-earth\n\nThis will allow me to practice some new skills:\n\n* ARGO float data. I have never worked with that.\n* Learn to process netCDF file in R. It's been awhile since I have done that.\n* {gganimate} to animate plots\n* Use the {marmap} R package for oceanographic data\n\n## Set-up\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(here)\nlibrary(tidyverse)\nlibrary(stringr)\nlibrary(sf)\nlibrary(ncdf4)\n\nlibrary(marmap)\nlibrary(tidyterra)\nlibrary(ggnewscale)\nlibrary(gganimate)\nlibrary(lubridate)\n```\n:::\n\n\n## Download the ARGO data\n\nI went here and downloaded an ARGO float netCDF for a float in the Black Sea. https://dataselection.euro-argo.eu/\n\n\n::: {.cell}\n\n```{.r .cell-code}\nncfile <- here::here(\"content\", \"data\", \"GL_PR_PF_6903766.nc\")\nargo <- ncdf4::nc_open(ncfile)\n```\n:::\n\n\nFigure out the names of things. Sadly this isn't a proper ARGO file so `oce:read.argo()` doesn't work.\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(argo$var)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"TIME_QC\"                  \"POSITION_QC\"             \n [3] \"DC_REFERENCE\"             \"DIRECTION\"               \n [5] \"VERTICAL_SAMPLING_SCHEME\" \"PRES\"                    \n [7] \"PRES_QC\"                  \"TEMP\"                    \n [9] \"TEMP_QC\"                  \"PSAL\"                    \n[11] \"PSAL_QC\"                 \n```\n:::\n\n```{.r .cell-code}\nnames(argo$dim)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"TIME\"      \"DEPTH\"     \"LATITUDE\"  \"LONGITUDE\" \"POSITION\"  \"STRING32\" \n[7] \"STRING256\"\n```\n:::\n:::\n\n\nA bit of poking reveals that the ARGO float data is from 2 sampling schemes: one at the surface and the other that is sampling as the flow goes down. I'll use just the data from the \"Primary sampling\" at the surface.\n\n::: {.cell}\n\n```{.r .cell-code}\na <- ncdf4::ncvar_get(argo, \"VERTICAL_SAMPLING_SCHEME\")\ngood <- stringr::str_detect(a, \"Primary sampling\")\na[1:3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Primary sampling: averaged [10 sec sampling 1 dbar average from surface to 100 dbar; 10 sec sampling 2 dbar average from 100 dbar to 500 dbar; 10 sec sampling 5 dbar average from 500 dbar to 1000 dbar]\" \n[2] \"Primary sampling: averaged [10 sec sampling 5 dbar average from 2000 dbar to 500 dbar; 10 sec sampling 2 dbar average from 500 dbar to 100 dbar; 10 sec sampling 1 dbar average from 100 dbar to 2.4 dbar]\"\n[3] \"Near-surface sampling: averaged unpumped [10 sec sampling 1 dbar average from 2.4 dbar to surface]\"                                                                                                        \n```\n:::\n:::\n\n\nNext I notice that the time is in julian days so I will need to convert that. There are a few ways to convert julian to date/time. Making the origin date a POSIXlt date object and adding on the seconds is an easy way.\n\n::: {.cell}\n\n```{.r .cell-code}\n# print(argo) and you'll see the ref time\nto <- as.POSIXlt(\"1950-01-01\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nargo_df <- tibble(\n  time = ncvar_get(argo, \"TIME\"),\n  lon = ncvar_get(argo, \"LONGITUDE\"),\n  lat = ncvar_get(argo, \"LATITUDE\"),\n  temp = ncvar_get(argo, \"TEMP\")[1,],\n  psal = ncvar_get(argo, \"PSAL\")[1,]\n) %>% subset(good) %>%\n  mutate(date = to+time*60*60*24) %>% # need to convert time to secs\n  mutate(qtr = as.character(quarter(date)))\n```\n:::\n\n\n## Black Sea\n\nUsing https://www.latlong.net/, I grabbed box coordinates.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- c(39, 47)\nx <- c(26, 44)\n```\n:::\n\n\n## Make the bathymetry plot\n\nGet bathymetry.\n\n::: {.cell}\n\n```{.r .cell-code}\nbathy <- marmap::getNOAA.bathy(x[1], x[2], y[1], y[2], resolution = 3)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nQuerying NOAA database ...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThis may take seconds to minutes, depending on grid size\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nBuilding bathy matrix ...\n```\n:::\n\n```{.r .cell-code}\nbathy_df <- marmap::fortify.bathy(bathy)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nautoplot.bathy(bathy, geom=c(\"tile\",\"contour\")) +\n    scale_fill_gradient2(low=\"dodgerblue4\", mid=\"gainsboro\", high=\"darkgreen\")\n```\n\n::: {.cell-output-display}\n![](day23_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nMap a map with the ARGO data added.\n\n::: {.cell}\n\n```{.r .cell-code}\nbasemap <- ggplot() +\n  # water raster\n  geom_raster(data = bathy_df %>% filter(z < 0), aes(x, y, fill = z), show.legend=FALSE) +\n  scale_fill_hypso_c(\"etopo1_bathy\") +\n  # add contours\n  geom_contour(data = bathy_df %>% filter(z < 0), \n               aes(x=x, y=y, z=z),\n               breaks=c(-100),\n               linewidth=c(0.3),\n               colour=\"grey\") +\n  geom_contour(data = bathy_df %>% filter(z < 0), \n               aes(x=x, y=y, z=z),\n               breaks=c(-500, -1000, -1500, -2000),\n               linewidth=c(0.3),\n               colour=\"white\") +\n  new_scale_fill() +\n  # Add argo points\n  geom_point(data = argo_df, aes(x = lon, y = lat, color = temp), size=3) +\n  scale_colour_steps2(low = \"blue\", mid = \"white\", high = \"red\",\n    midpoint = mean(argo_df$temp), name=\"temperature (C)\") +\n  new_scale_fill() +\n  # land raster\n  geom_raster(data = bathy_df %>% filter(z >= 0), aes(x, y, fill = z), show.legend=FALSE) +\n  scale_fill_hypso_c(\"gmt_globe_hypso\") +\n  theme_void() +\n  theme(\n    legend.position = \"bottom\"\n  ) + \n  ggtitle(\"An Argo bouy in the Black Sea\")\nbasemap\n```\n\n::: {.cell-output-display}\n![](day23_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## map the location\nargo.animate <- basemap +\n geom_label(\n    data = argo_df %>% slice(seq(1,dim(argo_df)[1],14)),\n    aes(label = format(date, \"%b %Y\")), x=35, y=43)+\n  transition_time(date)+\n  ease_aes(\"sine-in-out\")+\n  shadow_mark()\n\ngganimate::animate(argo.animate)\n```\n\n::: {.cell-output-display}\n![](day23_files/figure-html/unnamed-chunk-11-1.gif)\n:::\n:::\n\n\n## Save\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngganimate::anim_save(here::here(\"content\", \"argo.gif\"))\n```\n:::\n",
    "supporting": [
      "day23_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}