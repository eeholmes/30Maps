{
  "hash": "df4f5c0bf988d561b3575886f38b4392",
  "result": {
    "markdown": "---\ntitle: \"Day 20 favorite\"\n---\n\n\n## Code source inspriation\n\nA course I took on Species Distribution modeling (sdm). I wrote up my course project into a bookdown book. This was my first foray into making maps in R. [https://eeholmes.github.io/Species-Dist-Modeling---Trillium/](https://eeholmes.github.io/Species-Dist-Modeling---Trillium/)\n\n[Link to just the R code for map](https://github.com/eeholmes/30Maps/blob/main/R/day20.R)\n\n## Set-up Vermont and New Hampshire boundaries\n\nThere is surely an easier way to do this.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sp)\nlibrary(raster)\nlibrary(maps)\n```\n:::\n\n\nFirst I need to define an `raster::extent` object for a box bounding NH and VT. \n\n::: {.cell}\n\n```{.r .cell-code}\nNHVT <- raster::extent(-73.61056, -70.60205, 42.48873, 45.37969)\n```\n:::\n\n\nI download the shapefile for the NH and VT state borders using `getData()` which gives polygons for countries. Level 1 will be the state boundaries (I assume). The shape file has all the states. Then I use `subset()` to get the two states that I want. `path` says where to save the downloaded file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusashp <- raster::getData('GADM', country='USA', level=1, path=\"data\")\nnhvtshp <- subset(usashp, NAME_1 %in% c(\"New Hampshire\", \"Vermont\"))\n```\n:::\n\n\nCheck the projection for this shapefile:\n\n::: {.cell}\n\n```{.r .cell-code}\ncrs(nhvtshp)\n```\n:::\n\n\nI can plot the shapes.\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(nhvtshp, border=\"blue\", axes=TRUE)\n```\n\n::: {.cell-output-display}\n![](day20_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nI save the shapefile data to a file so I can use it later.\n\n::: {.cell}\n\n```{.r .cell-code}\nsave(nhvtshp, NHVT, file=here::here(\"content\", \"data\", \n\"shapefiles.RData\"))\n```\n:::\n\n\n## Download Trillium records\n\n\nThis map will use the following libraries:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dismo) # as sdm package\nlibrary(sp)\nlibrary(here)\n```\n:::\n\n\nLoad the shapefiles created earlier.\n\n::: {.cell}\n\n```{.r .cell-code}\nload(file=here::here(\"content\", \"data\", \n\"shapefiles.RData\"))\n```\n:::\n\n\nDownload records\n\nI will download occurrence data for *Trillium grandiflorum* and *Trillium undulatum* in my NHVT bounding box from the [Global Biodiversity Information Facility](https://www.gbif.org/). `nrecs` seems to be ignored. `geo` means only points with longitude and latitude. `removeZeros` means get rid of NA in location. `ext` is the bounding box to use. \n\nFirst I set where I will save the file and check if it is already there. I do this because if I rerun this script, I don't want to re-download. Note that GBIF data is updated weekly so using a time-stamp on your file might be good, but I am not doing that for this example.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilePath <- here::here(\"content\", \"data\", \"trillium_presences.RData\")\n```\n:::\n\n\nNow I download if I haven't downloaded already because this takes awhile. The downloaded data has many columns that I don't need. I will subset the following columns. `select` in the `subset()` call says what columns to use. \n\n::: {.cell}\n\n```{.r .cell-code}\nif (!file.exists(filePath)) {\n  # Download\n  grandiflorum <- dismo::gbif(\"Trillium\",\n    species = \"grandiflorum\",\n    nrecs = 300, geo = TRUE,\n    removeZeros = TRUE, ext = NHVT\n  )\n  undulatum <- dismo::gbif(\"Trillium\",\n    species = \"undulatum\",\n    nrecs = 300, geo = TRUE,\n    removeZeros = TRUE, ext = NHVT\n  )\n  # select columns\n  colsWeNeed <- c(\"species\", \"lat\", \"lon\", \"locality\", \"year\", \"coordinateUncertaintyInMeters\", \"occurrenceID\", \"occurrenceRemarks\", \"geodeticDatum\")\n  grandiflorum <- subset(grandiflorum, select = colsWeNeed)\n  undulatum <- subset(undulatum, select = colsWeNeed)\n  trillium.raw <- rbind(grandiflorum, undulatum)\n  save(trillium.raw, file = filePath)\n}\n```\n:::\n\n\nLoad in the presences data (saved from code above).\n\n::: {.cell}\n\n```{.r .cell-code}\nload(filePath)\n```\n:::\n\n\nCheck the projection to make sure it makes sense and there is only one value. Check that it is the same projection as my other layers.\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(trillium.raw$geodeticDatum) # \"WGS84\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"WGS84\"\n```\n:::\n:::\n\n\n`trillium.raw` is just a data frame. I make it a `sp` object (specifically a `SpatialPointsDataFrame`) using `sp::coordinates()` to specify which columns are the longitude and latitude.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrillium <- trillium.raw\nsp::coordinates(trillium) <- c(\"lon\", \"lat\")\n```\n:::\n\n\nCheck that it looks ok and there are no NAs.\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(trillium$lon)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n -73.61  -73.01  -72.57  -72.38  -71.73  -70.60 \n```\n:::\n\n```{.r .cell-code}\nsummary(trillium$lat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  42.49   43.61   44.18   44.00   44.47   45.38 \n```\n:::\n:::\n\n\nThe `coordinateUncertaintyInMeters` column give the uncertainty of the observation location. Some of the uncertainties are huge and I don't want those.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(cut(trillium$coordinateUncertaintyInMeters, c(0, 200, 500, 1000, 2000, 5000)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n      (0,200]     (200,500]   (500,1e+03] (1e+03,2e+03] (2e+03,5e+03] \n         3131           142            92            87           118 \n```\n:::\n:::\n\nI am going to keep only those locations with a location accuracy within 200m.\n\n::: {.cell}\n\n```{.r .cell-code}\ngood <- which(trillium$coordinateUncertaintyInMeters < 200)\ntrillium <- trillium[good, ]\n```\n:::\n\n\n## Plot the locations\n\nNow I can plot the occurrences points and add the NH and VT state boundaries. *Trillium undulatum* is much more common. \n\n::: {.cell}\n\n```{.r .cell-code}\nplot(nhvtshp, border = \"blue\", axes = TRUE)\nplot(subset(trillium, species == \"Trillium grandiflorum\"), pch = 19, cex = 0.25, add = TRUE)\nplot(subset(trillium, species == \"Trillium undulatum\"), pch = 19, cex = 0.25, col = \"red\", add = TRUE)\ntitle(\"Trillium grandiflorum (black) and Trillium undulatum (red) records\", cex.main=0.75)\n```\n\n::: {.cell-output-display}\n![](day20_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n## Save\n\n\n::: {.cell}\n\n```{.r .cell-code}\npng(file = \"day20_trillium.png\", bg = \"white\")\nplot(nhvtshp, border = \"blue\", axes = TRUE)\nplot(subset(trillium, species == \"Trillium grandiflorum\"), pch = 19, cex = 0.25, add = TRUE)\nplot(subset(trillium, species == \"Trillium undulatum\"), pch = 19, cex = 0.25, col = \"red\", add = TRUE)\ntitle(\"Trillium grandiflorum (black) and Trillium undulatum (red) records\", cex.main=1)\ndev.off()\n```\n:::\n",
    "supporting": [
      "day20_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}