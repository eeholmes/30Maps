[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Eli’s 30 Maps",
    "section": "",
    "text": "https://twitter.com/tjukanov/status/1576650170535936001\nSome of these are just code from others and some I altered substantially."
  },
  {
    "objectID": "index.html#thumbnails",
    "href": "index.html#thumbnails",
    "title": "Eli’s 30 Maps",
    "section": "Thumbnails",
    "text": "Thumbnails\n\n\n\n Day 18 OSM data – R code\n\n\n Day 11 Red – R code\n\n\n\n\n Day 16 Minimal – R code\n\n\n Day 18 Blue – R code\n\n\n\n\n Day 18b Blue – R code\n\n\n Day 19 Globe – R code\n\n\n\n\n Day 20 Favorite – R code"
  },
  {
    "objectID": "content/day11.html",
    "href": "content/day11.html",
    "title": "Day 11 Red",
    "section": "",
    "text": "https://twitter.com/dhernangomez/status/1591710364571504640\nhttps://gist.github.com/dieghernan/2ea67063a08a674514bc55e74fb30bf8"
  },
  {
    "objectID": "content/day11.html#code-to-download-the-data",
    "href": "content/day11.html#code-to-download-the-data",
    "title": "Day 11 Red",
    "section": "Code to download the data",
    "text": "Code to download the data\n\n\nCode\nlibrary(tidyverse)\nlibrary(sf)\n\n# Center and circle ----\ncity_coords <- tibble(address = \"Mazama, Washington\") |> \n  tidygeocoder::geocode(address, method = 'osm', long = long, lat = lat)\nlong <- city_coords$long[1]\nlat <- city_coords$lat[1]\ncrs2 <- 6384 # https://epsg.io/6384\nmazama_center <-\n  tibble(long, lat) %>%\n  st_as_sf(coords = c(\"long\", \"lat\"), crs = 4326)\n\ncity_coords <- tibble(address = \"Winthrop, Washington\") |> \n  tidygeocoder::geocode(address, method = 'osm', long = long, lat = lat)\nlong <- city_coords$long[1]\nlat <- city_coords$lat[1]\ncrs2 <- 6384 # https://epsg.io/6384\nwinthrop_center <-\n  tibble(long, lat) %>%\n  st_as_sf(coords = c(\"long\", \"lat\"), crs = 4326)\n\n# circle to crop in ----\ndist <-  50000\ncircle <- tibble(long, lat) %>%\n  st_as_sf(coords = c(\"long\", \"lat\"), crs = 4326) %>%\n  st_transform(crs = crs2) %>%\n  st_buffer(dist = dist) %>%\n  st_transform(crs = 4326)\n\n\n\n\nCode\n# See https://dieghernan.github.io/202210_tidyterra-hillshade/\n\nlibrary(tidyterra)\nlibrary(geodata)\nlibrary(scales)\nr <- elevation_30s(country = \"USA\", path = tempdir())\nnames(r) <- \"alt\"\n\nr <- crop(r, circle)\nr <- mask(r, circle, inverse=FALSE)\n\nslope <- terrain(r, \"slope\", unit = \"radians\")\naspect <- terrain(r, \"aspect\", unit = \"radians\")\nhill <- shade(slope, aspect, 30, 270)\nhill <- mask(hill, circle, inverse=FALSE)\naspect <- mask(aspect, circle, inverse=FALSE)\nslope <- mask(slope, circle, inverse=FALSE)\n\n# normalize names\nnames(hill) <- \"shades\"\n\n# Hillshading, but we need a palette\npal_greys <- hcl.colors(1000, \"Grays\")\n\nindex <- hill %>%\n  mutate(index_col = rescale(shades, to = c(1, length(pal_greys)))) %>%\n  mutate(index_col = round(index_col)) %>%\n  pull(index_col)\n\n\n# Get cols\nvector_cols <- pal_greys[index]"
  },
  {
    "objectID": "content/day11.html#plot-code",
    "href": "content/day11.html#plot-code",
    "title": "Day 11 Red",
    "section": "Plot code",
    "text": "Plot code\nSome testing.\n\n\nCode\nlibrary(\"ggrepel\")\n\nggplot() +\n  geom_spatraster(data = slope, fill=vector_cols, maxcell = Inf) +\n  geom_sf(data=winthrop_center) + \n  geom_text_repel(data = winthrop_center, aes(x=long, y=lat), label=\"Winthrop\", \n        fontface = \"bold\", nudge_x = .1, nudge_y = 0.1)\n\n\n\n\n\n\n\nCode\nggplot() +\n  geom_spatraster(data = hill, fill=vector_cols, maxcell = Inf) +\n  geom_spatraster(data=r, maxcell = Inf) +\n  scale_fill_hypso_tint_c(limits = as.vector(minmax(r)), \n                          palette = \"dem_poster\",\n                          alpha =0.8,\n                          labels = scales::label_comma(),\n                          breaks = c(seq(0,1000, 250), seq(2000, 6000, 1000))) +\n  guides(fill=guide_legend(title = \"elevation\", reverse = TRUE)) +\n  labs(title = \"Methow Valley, WA\") +\n  geom_sf(data = circle, color = \"black\", fill =  NA, linewidth = 2) +\n  geom_sf(data=winthrop_center) + \n  geom_text_repel(data = winthrop_center, aes(x=long, y=lat), label=\"Winthrop\", \n        fontface = \"bold\", nudge_x = .1, nudge_y = 0.1) +\n  geom_sf(data=mazama_center) + \n  geom_text_repel(data = mazama_center, aes(x=st_coordinates(mazama_center)[1], y=st_coordinates(mazama_center)[2]), label=\"Mazama\", \n        fontface = \"bold\", nudge_x = .1, nudge_y = 0.1) +\n  theme_void() +\n  theme(plot.title = element_text(hjust = 0.5, size = 30))"
  },
  {
    "objectID": "content/day16.html",
    "href": "content/day16.html",
    "title": "Day 16 Minimal",
    "section": "",
    "text": "Minimal Roads from https://twitter.com/kyle_e_walker/status/1592857115928199169"
  },
  {
    "objectID": "content/day16.html#code-to-download-the-data",
    "href": "content/day16.html#code-to-download-the-data",
    "title": "Day 16 Minimal",
    "section": "Code to download the data",
    "text": "Code to download the data\n\n\nCode\nlibrary(tigris)\nlibrary(tidyverse)\nlibrary(sf)\n\nsmallwood <- places(\"WA\", cb = TRUE) %>%\n  filter(str_detect(NAME, \"Winthrop\"))\n\nsmallwood_roads <- roads(\"WA\", \"Okanogan County\") %>%\n  st_intersection(smallwood) %>%\n  filter(st_is(., \"LINESTRING\"))"
  },
  {
    "objectID": "content/day16.html#plot-code",
    "href": "content/day16.html#plot-code",
    "title": "Day 16 Minimal",
    "section": "Plot code",
    "text": "Plot code\n\n\nCode\nggplot(smallwood_roads) + \n  geom_sf() + \n  theme_minimal(base_size = 16) + \n  labs(title = \"Roads in Winthrop, WA\")\n\n\n\n\n\nUses tigris R package | @kyle_e_walker;"
  },
  {
    "objectID": "content/day18.html",
    "href": "content/day18.html",
    "title": "Day 18 blue",
    "section": "",
    "text": "https://twitter.com/leeolney3/status/1593402445283180545\nhttps://github.com/leeolney3/30DayMapChallenge/blob/main/2022/scripts/18_Blue.R"
  },
  {
    "objectID": "content/day18.html#code-to-download-the-data",
    "href": "content/day18.html#code-to-download-the-data",
    "title": "Day 18 blue",
    "section": "Code to download the data",
    "text": "Code to download the data\n\n\nCode\nlibrary(tidyverse)\nlibrary(tigris)\nlibrary(sf)\nlibrary(ggtext)\nlibrary(showtext)\nshowtext_opts(dpi = 300)\nshowtext_auto(enable = TRUE)\n\n# Fonts\nfont_add_google(\"Sora\")\nf1 = \"Sora\"\nfont_add_google(\"Open Sans\")\nf2 = \"Open Sans\"\n\n# Data\nwater_area = area_water(\"washington\", \"okanogan county\", year = 2022) \nwater_linear = linear_water(\"washington\", \"okanogan county\", year = 2022) \n\n\nSet the bounding box.\n\n\nCode\nlibrary(osmdata)\nlibrary(sf)\nlibrary(tidyverse)\n\n# Center and circle ----\ncity_coords <- tibble(address = \"Winthrop, Washington\") |> \n  tidygeocoder::geocode(address, method = 'osm', long = long, lat = lat)\n\nlong <- city_coords$long[1]\nlat <- city_coords$lat[1]\n\ncrs2 <- 6384 # https://epsg.io/6384\ncenter_proj <-\n  tibble(long, lat) %>%\n  st_as_sf(coords = c(\"long\", \"lat\"), crs = 4326)\n\n# 10km circle to crop in ----\ndist <-  10000\ncircle <- tibble(long, lat) %>%\n  st_as_sf(coords = c(\"long\", \"lat\"), crs = 4326) %>%\n  st_transform(crs = crs2) %>%\n  st_buffer(dist = dist) %>%\n  st_transform(crs = 4326)\n\nwater_area_crop <- water_area %>%\n  st_transform(crs = 4326) %>%\n  st_intersection(circle)\nwater_linear_crop <- water_linear %>%\n  st_transform(crs = 4326) %>%\n  st_intersection(circle)"
  },
  {
    "objectID": "content/day18.html#plot-code",
    "href": "content/day18.html#plot-code",
    "title": "Day 18 blue",
    "section": "Plot code",
    "text": "Plot code\n\n\nCode\nggplot() +\n  geom_sf(data = circle, color = \"black\", fill =  \"white\") +\n  geom_sf(data=water_area_crop, fill=\"#173C6D\",color=\"#173C6D\", size=.4) +\n  geom_sf(data=water_linear_crop, color=\"#0096c7\", size=.3) +\n  coord_sf() +\n  theme_void() +\n  theme(\n    plot.subtitle = element_markdown(size=13, lineheight = 1, face=\"bold\", hjust=.5, margin=margin(t=-10)),\n    plot.title = element_markdown(family=f2, size=7.5, lineheight=1.4,margin=margin(l=-70, t=300, b=-350)),\n    plot.caption=element_text(family=f2,color=\"#33415c\",hjust = .5, size=7, margin=margin(t=-5)),\n    plot.margin=margin(t=0,l=3,r=.2,b=.3,unit=\"cm\"),\n    plot.background = element_rect(fill = \"grey98\", color = NA)\n    ) +\n  labs(subtitle=\"Winthrop, Washington\", \n       title=\"<span style='font-size:12pt;color:#173C6D'><b>Area hydrography</b></span><br><span style='color:#173C6D;'>(ponds, lakes, oceans, swamps)</span><br><br><span style='font-size:12pt;color:#0096c7'><b>Linear hydrography</b></span><br><span style='color:#0096c7'>(streams/rivers, braided streams, canals,<br>ditches, artificial paths, aqueducts)</span>\", \n       caption=\"#30DayMapChallenge 18 Color Friday: Blue\\nSource: US Census via {tigris} R package\")"
  },
  {
    "objectID": "content/day18b.html",
    "href": "content/day18b.html",
    "title": "Day 18 blue (b)",
    "section": "",
    "text": "Inspired by this https://twitter.com/imagineazhar/status/1593571328484790272 but then I went in a different direction."
  },
  {
    "objectID": "content/day18b.html#code-to-download-the-data",
    "href": "content/day18b.html#code-to-download-the-data",
    "title": "Day 18 blue (b)",
    "section": "Code to download the data",
    "text": "Code to download the data\n\n\nCode\nlibrary(marmap)\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(sysfonts)\nlibrary(showtext)\nlibrary(ggtext)\n\n\n\n# ------ Typography ------ \n\nfont_add_google(\"Mukta\", \"title_font\")\nshowtext_auto()\n\ntitle_font <- \"title_font\"\n\n\n# ------ Color palette ------ \n\npalette <- colorRampPalette(c(\"#03045e\", \"#0077b6\", \"#00b4d8\",\n                              \"#90e0ef\", \"#caf0f8\", \"#caf0f8\"))\n\n# --- Coord\n\ncity_coords <- tibble(address = \"Seattle, Washington\") |> \n  tidygeocoder::geocode(address, method = 'osm', long = long, lat = lat)\n\nlong <- city_coords$long[1]\nlat <- city_coords$lat[1]\n\nbathmetry <- getNOAA.bathy(lat1 = lat, lat2 = lat+4, lon1 = long, lon2 = long-3, resolution = 1)\n\ndf <- fortify.bathy(bathmetry)|>\n  filter(z < 0)\n\n\nSet the bounding box.\n\n\nCode\ncrs2 <- 6384 # https://epsg.io/6384\n\n# 10km circle to crop in ----\ndist <-  70000\ncircle <- tibble(long=long-1, lat=lat+1) %>%\n  st_as_sf(coords = c(\"long\", \"lat\"), crs = 4326) %>%\n  st_transform(crs = crs2) %>%\n  st_buffer(dist = dist) %>%\n  st_transform(crs = 4326)\n\nbathy_crop <- df %>%\n  st_as_sf(coords = c(\"x\", \"y\"), crs = 4326) %>%\n  st_transform(crs = 4326) %>%\n  st_intersection(circle)"
  },
  {
    "objectID": "content/day18b.html#plot-code",
    "href": "content/day18b.html#plot-code",
    "title": "Day 18 blue (b)",
    "section": "Plot code",
    "text": "Plot code\n\n\nCode\nggplot(df) +\n  geom_tile(aes(x = x, y = y, fill = z)) +\n  coord_sf(ylim = c(lat, lat+3), xlim = c(long, long-3), expand = FALSE) +\n  geom_sf(data = circle, color = \"black\", fill =  NA) +\n  scale_fill_gradientn(colors = palette(10),\n                       labels = function(x) format(-x, big.mark = \" \", trim = TRUE)) +\n  guides(fill = guide_colorbar(label.position = \"left\", title = \"Depth (m)\")) +\n  theme_void() +\n  theme(\n    legend.position = \"right\",\n    legend.key.height = unit(2.5, \"line\"),\n    legend.key.width = unit(0.75, \"line\"),\n    plot.background = element_rect(fill = \"#FFFBF8\", color = NA),\n    plot.title = element_markdown(size=7.5)\n    ) + \n  ggtitle(\"Circle is the region of interest\")\n\n\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\n\n\n\n\n\n\n\nCode\nggplot() +\n  geom_sf(data = circle, color = \"black\", fill =  \"white\") +\ngeom_sf(data=bathy_crop, aes(color=z), size=1) +\n  ggtitle(\"Puget Sound Bathymetry\") +\nscale_color_gradientn(colors = palette(10),\n                       labels = function(x) format(-x, big.mark = \" \", trim = TRUE)) +\n  guides(color = guide_colorbar(label.position = \"left\", title = \"Depth (m)\"))"
  },
  {
    "objectID": "content/day19.html",
    "href": "content/day19.html",
    "title": "Day 19 globe",
    "section": "",
    "text": "https://twitter.com/ryanahart/status/1593966022553489410\nhttps://twitter.com/dhernangomez/status/1591710364571504640\nhttps://twitter.com/geokaramanis/status/1593999504323317760\nhttps://github.com/curatedmess/30DayMapChallenge/blob/main/2022/11192022/qatar.R"
  },
  {
    "objectID": "content/day19.html#code-to-download-the-data",
    "href": "content/day19.html#code-to-download-the-data",
    "title": "Day 19 globe",
    "section": "Code to download the data",
    "text": "Code to download the data\nThe basic libraries\n\nlibrary(tidyverse)\nlibrary(sf)\n\nGet the Seattle lat/lon\n\n\nCode\n# Center\ncity_coords <- tibble(address = \"Seattle, Washington\") |> \n  tidygeocoder::geocode(address, method = 'osm', long = long, lat = lat)\nlong <- city_coords$long[1]\nlat <- city_coords$lat[1]\ncrs2 <- 6384 # https://epsg.io/6384\ncoord_center <-\n  tibble(long, lat) %>%\n  sf::st_as_sf(coords = c(\"long\", \"lat\"), crs = 4326)\n\n\nSet the projection. Had to futz a bit to get something that was close and didn’t throw an error w ggplot.\n\ncrs_string <- paste0(\"+proj=ortho +lat_0=\", lat, \" +lon_0=\", long)\n# crs_string <- \"+proj=ortho +lat_0=45 +lon_0=-105\"\n\nGet US elevations and define hill shading. This will be spatraster and comes with a projection which you can check with terra::crs(). We don’t need to change that; just need to know that it is specified.\n\n\nCode\nlibrary(tidyterra) # for geom_spatraster\nlibrary(geodata)\nlibrary(scales)\nr <- geodata::elevation_global(res=10, path = tempdir())\nnames(r) <- \"alt\"\n\nslope <- terra::terrain(r, \"slope\", unit = \"radians\")\naspect <- terra::terrain(r, \"aspect\", unit = \"radians\")\nhill <- terra::shade(slope, aspect, 30, 270)\n\n# give the hill shading a name so I can refer to it in aes()\nnames(hill) <- \"shades\"\n\n\nCreate a blue globe that will represent the ocean. 637100 is the radius of the earth in meters.\n\n\nCode\n# these are sf functions\nocean <- st_point(x = c(0,0)) %>%\n  st_buffer(dist = 6371000) %>%\n  st_sfc(crs = crs_string)"
  },
  {
    "objectID": "content/day19.html#plot-code",
    "href": "content/day19.html#plot-code",
    "title": "Day 19 globe",
    "section": "Plot code",
    "text": "Plot code\nCreate my globe. The palette “dem_poster” comes from tidyterra package.\n\n\nCode\nlibrary(ggfx) # for with_shadow\np1 <- ggplot() +\n  with_shadow(geom_sf(data = ocean, fill = \"#BBDEFB\", color = NA), sigma = 30, x_offset = 25, y_offset = 25, color = \"#58595d\") +\n  geom_spatraster(data = hill, aes(fill=shades), maxcell = Inf) +\n  geom_spatraster(data=r, maxcell = Inf) +\n  scale_fill_hypso_tint_c(limits = as.vector(minmax(r)), \n                          palette = \"dem_poster\",\n                          alpha =0.8,\n                          labels = scales::label_comma(),\n                          breaks = c(seq(0,1000, 250), seq(2000, 6000, 1000))) +\n  guides(fill=guide_legend(title = \"elevation\", reverse = TRUE)) +\n  coord_sf(crs = crs_string) +\n  theme_void()\np1\n\n\n\n\n\nThen add some annotation. The x and y units are in meters, so the nudge has to be huge (millions).\n\n\nCode\nlibrary(\"ggrepel\")\np2 <- p1 + geom_sf(data=coord_center) + \n  geom_text_repel(data = coord_center, aes(x=st_coordinates(coord_center)[1], y=st_coordinates(coord_center)[2]), label=\"Seattle\", \n        nudge_x = -3371000, nudge_y = -1371000) +\n  labs(\n    title = \"Globe with elevations\",\n    caption = \"Graphic: EE Holmes\"\n  ) +\n  theme(\n    plot.background = element_rect(fill = \"grey97\", color = NA),\n    plot.margin = unit(c(.5,.5,.5,.5), \"cm\"),\n    plot.title = element_text(hjust = 0.045, size = 26, face = \"bold\")\n  )\np2\n\n\n\n\n\nSwap out that square background with one with rounded corners. Well this didn’t really work since I couldn’t figure out how to save.\n\n\nCode\nlibrary(grid)\ng <- ggplotGrob(p2)\nbg <- g$grobs[[1]]\nround_bg <- roundrectGrob(x=bg$x, y=bg$y, width=bg$width, height=bg$height,\n                          r=unit(0.1, \"snpc\"),\n                          just=bg$just, name=bg$name, gp=bg$gp, vp=bg$vp)\ng$grobs[[1]] <- round_bg\ngrid.draw(g)\n\n\nFor some reason the shadowing looks wrong in the html. Looks like this in the saved image:\n\nknitr::include_graphics(here::here(\"content\", \"globe_elevation.png\"))"
  },
  {
    "objectID": "content/day19.html#save-image",
    "href": "content/day19.html#save-image",
    "title": "Day 19 globe",
    "section": "Save image",
    "text": "Save image\n\nggsave(paste0(\"globe_elevation\", \".png\"), dpi = 320, width = 8, height = 8)"
  },
  {
    "objectID": "content/day20.html",
    "href": "content/day20.html",
    "title": "Day 20 favorite",
    "section": "",
    "text": "A course I took on Species Distribution modeling (sdm). I wrote up my course project into a bookdown book. This was my first foray into making maps in R. https://eeholmes.github.io/Species-Dist-Modeling—Trillium/"
  },
  {
    "objectID": "content/day20.html#set-up-vermont-and-new-hampshire-boundaries",
    "href": "content/day20.html#set-up-vermont-and-new-hampshire-boundaries",
    "title": "Day 20 favorite",
    "section": "Set-up Vermont and New Hampshire boundaries",
    "text": "Set-up Vermont and New Hampshire boundaries\nThere is surely an easier way to do this.\n\nlibrary(sp)\nlibrary(raster)\nlibrary(maps)\n\nFirst I need to define an raster::extent object for a box bounding NH and VT.\n\nNHVT <- raster::extent(-73.61056, -70.60205, 42.48873, 45.37969)\n\nI download the shapefile for the NH and VT state borders using getData() which gives polygons for countries. Level 1 will be the state boundaries (I assume). The shape file has all the states. Then I use subset() to get the two states that I want. path says where to save the downloaded file.\n\nusashp <- raster::getData('GADM', country='USA', level=1, path=\"data\")\nnhvtshp <- subset(usashp, NAME_1 %in% c(\"New Hampshire\", \"Vermont\"))\n\nCheck the projection for this shapefile:\n\ncrs(nhvtshp)\n\nI can plot the shapes.\n\nplot(nhvtshp, border=\"blue\", axes=TRUE)\n\n\n\n\nI save the shapefile data to a file so I can use it later.\n\nsave(nhvtshp, NHVT, file=here::here(\"content\", \"data\", \n\"shapefiles.RData\"))"
  },
  {
    "objectID": "content/day20.html#download-trillium-records",
    "href": "content/day20.html#download-trillium-records",
    "title": "Day 20 favorite",
    "section": "Download Trillium records",
    "text": "Download Trillium records\nThis map will use the following libraries:\n\nlibrary(dismo) # as sdm package\nlibrary(sp)\nlibrary(here)\n\nLoad the shapefiles created earlier.\n\nload(file=here::here(\"content\", \"data\", \n\"shapefiles.RData\"))\n\nDownload records\nI will download occurrence data for Trillium grandiflorum and Trillium undulatum in my NHVT bounding box from the Global Biodiversity Information Facility. nrecs seems to be ignored. geo means only points with longitude and latitude. removeZeros means get rid of NA in location. ext is the bounding box to use.\nFirst I set where I will save the file and check if it is already there. I do this because if I rerun this script, I don’t want to re-download. Note that GBIF data is updated weekly so using a time-stamp on your file might be good, but I am not doing that for this example.\n\nfilePath <- here::here(\"content\", \"data\", \"trillium_presences.RData\")\n\nNow I download if I haven’t downloaded already because this takes awhile. The downloaded data has many columns that I don’t need. I will subset the following columns. select in the subset() call says what columns to use.\n\nif (!file.exists(filePath)) {\n  # Download\n  grandiflorum <- dismo::gbif(\"Trillium\",\n    species = \"grandiflorum\",\n    nrecs = 300, geo = TRUE,\n    removeZeros = TRUE, ext = NHVT\n  )\n  undulatum <- dismo::gbif(\"Trillium\",\n    species = \"undulatum\",\n    nrecs = 300, geo = TRUE,\n    removeZeros = TRUE, ext = NHVT\n  )\n  # select columns\n  colsWeNeed <- c(\"species\", \"lat\", \"lon\", \"locality\", \"year\", \"coordinateUncertaintyInMeters\", \"occurrenceID\", \"occurrenceRemarks\", \"geodeticDatum\")\n  grandiflorum <- subset(grandiflorum, select = colsWeNeed)\n  undulatum <- subset(undulatum, select = colsWeNeed)\n  trillium.raw <- rbind(grandiflorum, undulatum)\n  save(trillium.raw, file = filePath)\n}\n\nLoad in the presences data (saved from code above).\n\nload(filePath)\n\nCheck the projection to make sure it makes sense and there is only one value. Check that it is the same projection as my other layers.\n\nunique(trillium.raw$geodeticDatum) # \"WGS84\"\n\n[1] \"WGS84\"\n\n\ntrillium.raw is just a data frame. I make it a sp object (specifically a SpatialPointsDataFrame) using sp::coordinates() to specify which columns are the longitude and latitude.\n\ntrillium <- trillium.raw\nsp::coordinates(trillium) <- c(\"lon\", \"lat\")\n\nCheck that it looks ok and there are no NAs.\n\nsummary(trillium$lon)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n -73.61  -73.01  -72.57  -72.38  -71.73  -70.60 \n\nsummary(trillium$lat)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  42.49   43.61   44.18   44.00   44.47   45.38 \n\n\nThe coordinateUncertaintyInMeters column give the uncertainty of the observation location. Some of the uncertainties are huge and I don’t want those.\n\ntable(cut(trillium$coordinateUncertaintyInMeters, c(0, 200, 500, 1000, 2000, 5000)))\n\n\n      (0,200]     (200,500]   (500,1e+03] (1e+03,2e+03] (2e+03,5e+03] \n         3131           142            92            87           118 \n\n\nI am going to keep only those locations with a location accuracy within 200m.\n\ngood <- which(trillium$coordinateUncertaintyInMeters < 200)\ntrillium <- trillium[good, ]"
  },
  {
    "objectID": "content/day20.html#plot-the-locations",
    "href": "content/day20.html#plot-the-locations",
    "title": "Day 20 favorite",
    "section": "Plot the locations",
    "text": "Plot the locations\nNow I can plot the occurrences points and add the NH and VT state boundaries. Trillium undulatum is much more common.\n\nplot(nhvtshp, border = \"blue\", axes = TRUE)\nplot(subset(trillium, species == \"Trillium grandiflorum\"), pch = 19, cex = 0.25, add = TRUE)\nplot(subset(trillium, species == \"Trillium undulatum\"), pch = 19, cex = 0.25, col = \"red\", add = TRUE)\ntitle(\"Trillium grandiflorum (black) and Trillium undulatum (red) records\", cex.main=0.75)"
  },
  {
    "objectID": "content/day20.html#save",
    "href": "content/day20.html#save",
    "title": "Day 20 favorite",
    "section": "Save",
    "text": "Save\n\npng(file = \"day20_trillium.png\", bg = \"white\")\nplot(nhvtshp, border = \"blue\", axes = TRUE)\nplot(subset(trillium, species == \"Trillium grandiflorum\"), pch = 19, cex = 0.25, add = TRUE)\nplot(subset(trillium, species == \"Trillium undulatum\"), pch = 19, cex = 0.25, col = \"red\", add = TRUE)\ntitle(\"Trillium grandiflorum (black) and Trillium undulatum (red) records\", cex.main=1)\ndev.off()"
  },
  {
    "objectID": "content/day8.html",
    "href": "content/day8.html",
    "title": "Day 8 sf",
    "section": "",
    "text": "Code from https://github.com/AbdoulMa/30DayMapChallenge/tree/main/Day8"
  },
  {
    "objectID": "content/day8.html#code-to-download-the-data",
    "href": "content/day8.html#code-to-download-the-data",
    "title": "Day 8 sf",
    "section": "Code to download the data",
    "text": "Code to download the data\n\n\nCode\nlibrary(osmdata)\nlibrary(sf)\nlibrary(tidyverse)\n\nbbx <- getbb(paste0(\"Winthrop\", \",\", \"Washington\"))\n# Get motorway, trunk, primary, secondary, tertiary ways ----\nhighways <- bbx %>%\n  opq() %>%\n  add_osm_feature(\n    key = \"highway\",\n    value = c(\n      \"motorway\",\n      \"trunk\",\n      \"primary\",\n      \"secondary\",\n      \"tertiary\",\n      \"motorway_link\",\n      \"trunk_link\",\n      \"primary_link\",\n      \"secondary_link\",\n      \"tertiary_link\"\n    )\n  ) %>%\n  osmdata_sf()\n\n# Get small streets, pedestrian paths, living streets ----\nstreets <- bbx %>%\n  opq() %>%\n  add_osm_feature(\n    key = \"highway\",\n    value = c(\n      \"residential\",\n      \"living_street\",\n      \"service\",\n      \"unclassified\",\n      \"pedestrian\",\n      \"footway\",\n      \"track\",\n      \"path\"\n    )\n  ) %>%\n  osmdata_sf()\n\n# Get landuse ---- \nlanduse <- opq(bbx) |> \n  add_osm_feature(key = \"landuse\") |> \n  osmdata_sf() |> \n  unname_osmdata_sf()\n\n# Get buildings ---- \nbuildings <- opq(bbx) |> \n  add_osm_feature(key = \"building\") %>%\n  osmdata_sf() |> \n  unname_osmdata_sf()\n\n# Center and circle ----\ncity_coords <- tibble(address = \"Winthrop, Washington\") |> \n  tidygeocoder::geocode(address, method = 'osm', long = long, lat = lat)\n\nlong <- city_coords$long[1]\nlat <- city_coords$lat[1]\n\ncrs2 <- 6384 # https://epsg.io/6384\ncenter_proj <-\n  tibble(long, lat) %>%\n  st_as_sf(coords = c(\"long\", \"lat\"), crs = 4326)\n\n# circle to crop in ----\ndist <-  3500\ncircle <- tibble(long, lat) %>%\n  st_as_sf(coords = c(\"long\", \"lat\"), crs = 4326) %>%\n  st_transform(crs = crs2) %>%\n  st_buffer(dist = dist) %>%\n  st_transform(crs = 4326)\n\nstreets_lines <- st_intersection(circle, streets$osm_lines)\nhighways_lines <- st_intersection(circle, highways$osm_lines)\nbuildings_polygons <- st_intersection(circle, buildings$osm_polygons)\nlanduse_polygons <- st_intersection(circle, landuse$osm_polygons)"
  },
  {
    "objectID": "content/day8.html#plot-code",
    "href": "content/day8.html#plot-code",
    "title": "Day 8 sf",
    "section": "Plot code",
    "text": "Plot code\n\n\nCode\nggplot() +\n  geom_sf(data = circle, color = \"black\", fill =  \"white\") +\n  geom_sf(\n    data = landuse_polygons,\n    fill = \"#646464\", \n    size = .05,\n    alpha = .95\n  ) + \n  geom_sf(\n    data = buildings_polygons, \n    size = .05,\n    fill = \"#c8c8c8\", \n    color = \"#c8c8c8\", \n    alpha = .75\n  ) + \n  geom_sf(\n    data = streets_lines,\n    col = \"grey40\",\n    size = .4,\n    alpha = .65\n  ) +\n  geom_sf(\n    data = highways_lines,\n    col = \"grey25\",\n    size = .6,\n    alpha = .8\n  ) +\n  ggtitle(\"Winthrop\") +\n  theme_void() + \n  theme(\n    plot.title = element_text(hjust = 0.5),\n    plot.background = element_rect(fill = \"grey98\", color = NA),\n    plot.margin = margin(b = 10)\n    )"
  }
]