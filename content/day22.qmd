---
title: "Day 22 Movement"
---

## Re-create this image

Today's goal is to recreate the ARGO float animated image from this blog post: [annimate oceanographic data](https://semba-blog.netlify.app/10/29/2018/animating-oceanographic-data-in-r-with-ggplot2-and-gganimate/) by [Masumbuko Semba](https://semba-blog.netlify.app/about/) [GitHub](https://github.com/lugoga)

I ended up using more of this code: @HansenDJohnson
https://hansenjohnson.org/post/bathymetric-maps-in-r/
and @geokaramanis
https://github.com/gkaramanis/30DayMapChallenge/tree/main/2022/07-raster-earth

This will allow me to practice some new skills:

* ARGO float data. I have never worked with that.
* Learn to process netCDF file in R. It's been awhile since I have done that.
* {gganimate} to animate plots
* Use the {marmap} R package for oceanographic data

## Set-up

```{r message=FALSE,warning=FALSE, results='hide'}
library(here)
library(tidyverse)
library(stringr)
library(sf)
library(ncdf4)

library(marmap)
library(tidyterra)
library(ggnewscale)
library(gganimate)
library(lubridate)
```

## Download the ARGO data

I went here and downloaded an ARGO float netCDF for a float in the Black Sea. https://dataselection.euro-argo.eu/

```{r}
ncfile <- here::here("content", "data", "GL_PR_PF_6903766.nc")
argo <- ncdf4::nc_open(ncfile)
```

Figure out the names of things. Sadly this isn't a proper ARGO file so `oce:read.argo()` doesn't work.
```{r}
names(argo$var)
names(argo$dim)
```

A bit of poking reveals that the ARGO float data is from 2 sampling schemes: one at the surface and the other that is sampling as the flow goes down. I'll use just the data from the "Primary sampling" at the surface.
```{r}
a <- ncdf4::ncvar_get(argo, "VERTICAL_SAMPLING_SCHEME")
good <- stringr::str_detect(a, "Primary sampling")
a[1:3]
```

Next I notice that the time is in julian days so I will need to convert that. There are a few ways to convert julian to date/time. Making the origin date a POSIXlt date object and adding on the seconds is an easy way.
```{r}
# print(argo) and you'll see the ref time
to <- as.POSIXlt("1950-01-01")
```

```{r}
argo_df <- tibble(
  time = ncvar_get(argo, "TIME"),
  lon = ncvar_get(argo, "LONGITUDE"),
  lat = ncvar_get(argo, "LATITUDE"),
  temp = ncvar_get(argo, "TEMP")[1,],
  psal = ncvar_get(argo, "PSAL")[1,]
) %>% subset(good) %>%
  mutate(date = to+time*60*60*24) %>% # need to convert time to secs
  mutate(qtr = as.character(quarter(date)))
```

## Black Sea

Using https://www.latlong.net/, I grabbed box coordinates.

```{r}
y <- c(39, 47)
x <- c(26, 44)
```

## Make the bathymetry plot

Get bathymetry.
```{r}
bathy <- marmap::getNOAA.bathy(x[1], x[2], y[1], y[2], resolution = 3)
bathy_df <- marmap::fortify.bathy(bathy)
```

```{r}
autoplot.bathy(bathy, geom=c("tile","contour")) +
    scale_fill_gradient2(low="dodgerblue4", mid="gainsboro", high="darkgreen")
```

Map a map with the ARGO data added.
```{r}
basemap <- ggplot() +
  # water raster
  geom_raster(data = bathy_df %>% filter(z < 0), aes(x, y, fill = z), show.legend=FALSE) +
  scale_fill_hypso_c("etopo1_bathy") +
  # add contours
  geom_contour(data = bathy_df %>% filter(z < 0), 
               aes(x=x, y=y, z=z),
               breaks=c(-100),
               linewidth=c(0.3),
               colour="grey") +
  geom_contour(data = bathy_df %>% filter(z < 0), 
               aes(x=x, y=y, z=z),
               breaks=c(-500, -1000, -1500, -2000),
               linewidth=c(0.3),
               colour="white") +
  new_scale_fill() +
  # Add argo points
  geom_point(data = argo_df, aes(x = lon, y = lat, color = temp), size=3) +
  scale_colour_steps2(low = "blue", mid = "white", high = "red",
    midpoint = mean(argo_df$temp), name="temperature (C)") +
  new_scale_fill() +
  # land raster
  geom_raster(data = bathy_df %>% filter(z >= 0), aes(x, y, fill = z), show.legend=FALSE) +
  scale_fill_hypso_c("gmt_globe_hypso") +
  theme_void() +
  theme(
    legend.position = "bottom"
  ) + 
  ggtitle("An Argo bouy in the Black Sea")
basemap
```


```{r}
## map the location
argo.animate <- basemap +
 geom_label(
    data = argo_df %>% slice(seq(1,dim(argo_df)[1],14)),
    aes(label = format(date, "%b %Y")), x=35, y=43)+
  transition_time(date)+
  ease_aes("sine-in-out")+
  shadow_mark()

gganimate::animate(argo.animate)
```

## Save

```{r eval=FALSE}
gganimate::anim_save(here::here("content", "argo.gif"))
```
